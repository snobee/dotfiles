# Tex Snippets
#   Options
#       i - in work expansion
#       w - word boundary
#       b - beginning of a line
#       A - auto expand
#       e - custom context
#       m - only in math mode
#       n - not in math mode
#       v - exclusive to visual mode
#       * - append an * to remove numbering
#
#   snippets
#       command     options description
#
#   math
#       ??          ?       ?
#        `-> sources all the snippets from 'math'
#
#   tex
#       temp        bn      open   the default template
#       sec         wn*     start  a new section
#       ??          wn*     start  a new subsection
#        `-> expands on 'sub' preceded by any number of 's's
#            each aditional 's' will increase the level of subsection
#       thm         wn*     start  a new theorem
#       prop        wn*     start  a new proposition
#       lem         wn*     start  a new lemma
#       cor         wn*     start  a new corollary
#       prf         wn*     start  a new proof
#       def         wn*     start  a new definition
#       rem         wn*     start  a new remark
#       ex          wn*     start  a new example
#       item        wn      enter  an itemize environment
#       enum        wn      enter  an enumitem environment
#       cen         wn      enter  a  centre environment
#       verb        wn      enter  a  verbatim environment
#       code        wn      enter  an lstlisting environment
#       i           wn      start  italics
#       b           wn      start  boldface
#       u           wn      start  underline
#       jj          iAn     start  inline math mode
#       kk          iAn     start  centred math mode
#       ii          bAe     insert item (in 'enumerate' or 'itemize)
#       ~ i         in      insert tilde
#       \\[         iA      start  spaced newline
#
#   figures and tables
#       ref         w       create a reference
#       fig         b       enter  figure environment
#       tab         b       enter  table environment
#       ??          iA      enter  table environment
#        `-> expands on "tab<format> " where format includes 'l', 'c', 'r', or '|'
#       sub         bAe     enter  subfigure environment (in 'figure' or 'table')
#       mini        bAe     enter  minipage environment (in 'figure' or 'table')
#       cc          bAe     create caption (in 'figure' or 'table')
#       ll          bAe     create label (in 'figure' or 'table')
#       gg          bAe     insert graphic (in 'figure')
#       rr          bAe     create row (in 'tabular')
#       mid         bAe     insert midline (in 'tabular')
#       cmid        wAe     create cmid rule (in 'tabular')
#       multi       wAe     create multiline (in 'tabular')
#
#   tikz
#       tz          b       enter  tikz environment
#       tikz        b       enter  tikz environment
#       tiks        b       create a new tikzstyle
#       cc          bAe     start  new coordinate (in 'tikzpicture')
#       nn          bAe     start  new node (in 'tikzpicture')
#       dd          bAe     start  new draw (in 'tikzpicture')
#       ff          bAe     start  new fill (in 'tikzpicture')
#       fd          bAe     start  new filldraw (in 'tikzpicture')

global !p
from latex import *

def fix_indent():
	vim.eval('feedkeys("\<c-d>")')
endglobal

extends math

# tex
# ------------------------------------------------------------------------------
# https://tex.stackexchange.com/questions/2233/whats-the-best-way-make-an-augmented-coefficient-matrix
snippet temp "Basic template" "not math()" eb
\\documentclass[a4paper]{article}

\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{textcomp}
\\usepackage{mathtools, amssymb}
\\usepackage[shortlabels]{enumitem}
\\usepackage{booktabs,multirow}
\\usepackage{graphicx,float,caption,subcaption}
\\usepackage{tikz}

% matrices
\\makeatletter
\\renewcommand*\\env@matrix[1][*\\c@MaxMatrixCols c]{%
	\\hskip -\\arraycolsep
	\\let\\@ifnextchar\\new@ifnextchar
	\\array{#1}}
\\makeatother

% theorems
\newtheorem{theorem}{Theorem}[section]
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{corollary}{Corollary}[theorem]
\newtheorem{proof}{Proof}[theorem]
\newtheorem{definition}{Definition}[section]
\newtheorem{remark}[definition]{Remark}
\newtheorem{example}{Example}[section]

\\title{$1}

\\begin{document}
	\\maketitle
	$0
\\end{document}
endsnippet

snippet "sec(\*?)" "sections" "not math()" ewr
\\section`!p snip.rv = match.group(1)`{${VISUAL}$1}
$0
endsnippet

snippet "(s*)sub(\*?)" "subsection" "not math() or not env('figure')" ewr
\\`!p snip.rv = ('sub'*(len(match.group(1))) if match.group(1) else '') + 'subsection' + match.group(2)`{${VISUAL}$1}
$0
endsnippet

snippet "thm(\*?)" "theorem" "not math()" ewr
\\begin{theorem}
	${VISUAL}$0
\\end{theorem}
endsnippet

snippet "prop(\*?)" "proposition" "not math()" ewr
\\begin{proposition}
	${VISUAL}$0
\\end{proposition}
endsnippet

snippet "lem(\*?)" "lemma" "not math()" ewr
\\begin{lemma}
	${VISUAL}$0
\\end{lemma}
endsnippet

snippet "cor(\*?)" "corollary" "not math()" ewr
\\begin{corollary}
	${VISUAL}$0
\\end{corollary}
endsnippet

snippet "prf(\*?)" "proof" "not math()" ewr
\\begin{proof}
	${VISUAL}$0
\\end{proof}
endsnippet

snippet "def(\*?)" "definition" "not math()" ewr
\\begin{definition}
	${VISUAL}$0
\\end{definition}
endsnippet

snippet "rem(\*?)" "remark" "not math()" ewr
\\begin{remark}
	${VISUAL}$0
\\end{remark}
endsnippet

snippet "ex(\*?)" "example" "not math()" ewr
\\begin{example}
	${VISUAL}$0
\\end{example}
endsnippet

snippet item "itemize" "not math()" ew
\\begin{itemize}
	\\item ${VISUAL}$0
\\end{itemize}
endsnippet

snippet enum "enumerate" "not math()" ew
\\begin{enumerate}[${1:(a)}]
	\\item ${VISUAL}$0
\\end{enumerate}
endsnippet

post_expand "fix_indent()"
snippet ii "item" "env('enumerate') or env('itemize')" ebA
\\item ${VISUAL}
endsnippet

snippet cen "center" "not math()" ew
\\begin{center}
	${VISUAL}$0
\\end{center}
endsnippet

snippet verb "verbatim" "not math()" ew
\\begin{verbatim}
${VISUAL}$0
\\end{verbatim}
endsnippet

snippet code "listings" "not math()" ew
\\begin{lstlisting}[language=$1]
${VISUAL}$0
\\end{lstlisting}
endsnippet

snippet i "italics" "not math() and snip.visual_mode" ewA
\\textit{${VISUAL}}
endsnippet

snippet i "italics" "not math() and not snip.visual_mode" ew
\\textit{$1}
endsnippet

snippet b "boldface" "not math() and snip.visual_mode" ewA
\\textbf{${VISUAL}}
endsnippet

snippet b "boldface" "not math() and not snip.visual_mode" ew
\\textbf{$1}
endsnippet

snippet u "underline" "not math() and snip.visual_mode" ewA
\\underline{${VISUAL}}
endsnippet

snippet u "underline" "not math() and not snip.visual_mode" ew
\\underline{$1}
endsnippet

snippet jj "enter math mode $$" "not math()" eiA
\$${VISUAL}$1\$
endsnippet

snippet kk "enter centred math mode" "not math()" eiA
\$\$${VISUAL}$0\$\$
endsnippet

snippet ~ "tilde" "not math()" ei
$\\sim$
endsnippet

snippet \\[ "spaced newline" iA
\\\\[$1${2:pt}]
endsnippet

# figures and tables
# ------------------------------------------------------------------------------
global !p
def create_table(snip):
	# get dimensions should be of the form "@@[lcr|]+@@"
	form = snip.buffer[snip.line].split('@@')[-2]
	size = sum([form.count(e) for e in 'lcr'])
	snippet_body = "\\begin{tabular}{@{}" \
		+ form \
		+ "@{}}\n\t${1:\\toprule\n\t" \
		+ " & ".join('$' + str(i+2) for i in range(size)) \
		+ " \\\\\\\\$0" \
		+ "\n\t\\bottomrule}\n\\end{tabular}"
	snip.expand_anon(snippet_body, trigger="@@[lcr|]+@@", options="irA")

def create_row(snip):
	max_range = 50
	count = 0
	p = re.compile("^.*\\\\begin{tabular}{(@{})?([\|lcr]+)(@{})?}.*")
	for i in range(1, max_range):
		match = p.match(snip.buffer[snip.line-i])
		if match is not None:
			form = match.group(2)
			count = sum([form.count(e) for e in 'lcr'])
			break
	snippet_body = " & ".join(['$' + str(i+1) for i in range(count)]) \
		+ " \\\\\\\\"
	snip.expand_anon(snippet_body, trigger="row", options="bA")
endglobal

snippet ref "reference" w
\\ref{${VISUAL}$1}
endsnippet

snippet fig "figure" b
\\begin{figure}[${1:H}]
	\\centering
	${VISUAL}$0
\\end{figure}
endsnippet

snippet tab "table" b
\\begin{table}[$1]
	\\centering
	${VISUAL}$0
\\end{table}
endsnippet

post_jump "create_table(snip)"
snippet "tab([lcr|]+) " "tables" irA
@@`!p snip.rv = match.group(1)`@@
endsnippet

snippet sub "subfigure" "env('figure')" ebA
\\begin{subfigure}[${1:h}]{${2:${3:0.4}\linewidth}}
	${VISUAL}$4
\\end{subfigure}
endsnippet

snippet sub "subfigure" "env('table')" ebA
\\begin{subtable}[${1:h}]{${2:${3:0.4}\linewidth}}
	${VISUAL}$4
\\end{subtable}
endsnippet

snippet mini "minipage" "env('figure') or env('table')" ebA
\\begin{minipage}[${1:h}]{${2:${3:0.4}\linewidth}
	${VISUAL}$4
\\end{minipage}
endsnippet

snippet cc "caption" "env('figure') or env('table')" ebA
\\caption{$1}
endsnippet

snippet ll "label" "env('figure') or env('table')" ebA
\\label{$1}
endsnippet

snippet gg "include graphic" "env('figure')" ebA
\\includegraphics[${1:width=\linewidth}]{$2}
endsnippet

post_jump "create_row(snip)"
snippet rr "table row" "env('tabular')" ebA
row
endsnippet

snippet "(?<!c)mid" "mid rule" "env('tabular')" ebrA
\\midrule
endsnippet

snippet cmid "cmid rule" "env('tabular')" ewA
\\cmidrule(lr){$1}$0
endsnippet

snippet multi "multi column" "env('tabular')" ewA
\\multicolumn{${1:columns}}{${2:format}}{${3:text}}$0
endsnippet

# cannot use regex with python as all system calls are duplicated
snippet fig "draw a figure with swappy" "env('figure')" e
\\includegraphics[${1:width=\linewidth}]{`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 1024x1024 xc:white $name;
swappy -f $name -o $name;
echo $name`}
endsnippet

snippet figlong "draw a long figure with swappy" "env('figure')" e
\\includegraphics[${1:width=\linewidth}]{`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 1024x512 xc:white $name;
swappy -f $name -o $name;
echo $name`}
endsnippet

snippet figtall "draw a tall figure with swappy" "env('figure')" e
\\includegraphics[${1:width=\linewidth}]{`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 512x1024 xc:white $name;
swappy -f $name -o $name;
echo $name`}
endsnippet

# tikz
# ------------------------------------------------------------------------------
snippet "tz|tikz" "tikz" br
\\begin{tikzpicture}
	$0
\\end{tikzpicture}
endsnippet

snippet tiks "tikz style" b
\\tikzstyle{$1} = [$2]
endsnippet

snippet cc "coordinate" "env('tikzpicture')" ebA
\\coordinate ($1) at ($2);
endsnippet

snippet nn "node" "env('tikzpicture')" ebA
\\node[$1] $0
endsnippet

snippet dd "draw" "env('tikzpicture')" ebA
\\draw[$1] $0
endsnippet

snippet ff "fill" "env('tikzpicture')" ebA
\\fill[$1] $0
endsnippet

snippet fd "filldraw" "env('tikzpicture')" ebA
\\filldraw[$1] $0
endsnippet
