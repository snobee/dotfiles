global !p
from latex import *
endglobal

snippet ** "multiply dot" "math()" eiA
\\cdot
endsnippet

snippet xx "multiply x" "math()" eiA
\\times
endsnippet

snippet / "Fraction" "math() and snip.visual_mode" eiA
\\frac{${VISUAL}}{$1}
endsnippet

snippet // "Fraction" "math()" eiA
\\frac{$1}{$2}
endsnippet

priority 1
snippet '((\d+\.)?\d+((\^|_)?(\{[A-Za-z\d]+\}|\{\([A-Za-z\d]+\)\}|[A-Za-z\d]))*)/' "number frac" "math() and not snip.visual_mode" ewrA
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

priority 2
snippet '(((\d+\.)?\d+)?\\?[A-Za-z]+((\^|_)?(\{[A-Za-z\d]+\}|\{\([A-Za-z\d]+\)\}|[A-Za-z\d]))*)/' "symbol frac" "math() and not snip.visual_mode" ewrA
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

priority 3
snippet '^.*\)/' "() frac" "math() and not snip.visual_mode" ewrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
for i in range(i,-1,-1):
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}
endsnippet
priority 0

snippet ss "superscript" "math() and snip.visual_mode" eiA
{${VISUAL}}^{$1}
endsnippet

snippet "(?<!\\setminu)(?<!\\(implie|nexist))(?<!\\exist)(?<!\\(time|[lcdv]dot))(?<!\\co)ss" "superscript" "math() and not snip.visual_mode and aftermath(snip,2)" eirA
^{$1}
endsnippet

snippet dd "subscript" "math() and snip.visual_mode" eiA
{${VISUAL}}_{$1}
endsnippet

snippet dd "subscript" "math() and not snip.visual_mode and aftermath(snip, 2)" eiA
_{$1}
endsnippet

snippet "([A-Za-z]|\}|\))(\d)\2" "auto subscript" "math()" eirA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet sq "squared ^2" "math() and snip.visual_mode" eiA
{${VISUAL}}^2
endsnippet

snippet "(?<!\\time)(?<!(\\co|dot))sq" "squared ^2" "math() and not snip.visual_mode and aftermath(snip, 2)" eirA
^2
endsnippet

snippet cb "cubed ^3" "math() and snip.visual_mode" eiA
{${VISUAL}}^3
endsnippet

snippet cb "cubed ^3" "math() and not snip.visual_mode and aftermath(snip, 2)" eiA
^3
endsnippet

snippet inv "inverse" "math() and snip.visual_mode" eiA
{${VISUAL}}^{-1}
endsnippet

snippet inv "inverse" "math() and not snip.visual_mode and aftermath(snip, 3)" eiA
^{-1}
endsnippet

snippet "(?<!\\time)(?<!(\\co|dot))sr" "square root" "math()" eirA
\\sqrt{${VISUAL}$1}
endsnippet

snippet cr "cube root" "math()" eiA
\\sqrt[3]{${VISUAL}$1}
endsnippet

snippet bow "bowtie" "math()" eiA
\\bowtie
endsnippet

snippet "(?<!\\)ln" "natural logarithm" "math()" eirA
\\ln
endsnippet

snippet "(?<!\\)(log|exp|det|dim|ker|gcd|sup|max|min)" "length 3 operators" "math()" eirA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet "(?<!(\\r|\\l))ceil" "ceil" "math()" eirA
\\left\\lceil${VISUAL}$1\\right\\rceil
endsnippet

snippet "(?<!(\\r|\\l))floor" "floor" "math()" eirA
\\left\\lfloor${VISUAL}$1\\right\\rfloor
endsnippet

snippet eval "evaluated at" "math()" eiA
\\left.${VISUAL}$1\\right\\vert_{$2}
endsnippet

snippet "(?<!\\arc)(?<!\\(io|be))(?<![\\ah])(sin|cos|tan|csc|sec|cot)" "trig functions" "math()" eirA
\\`!p snip.rv = match.group(2)`
endsnippet

snippet "a(sin|cos|tan|csc|sec|cot)" "arc trig function" "math()" eirA
\\arc`!p snip.rv = match.group(1)`
endsnippet

snippet "h(sin|cos|tan|csc|sec|cot)" "hyper trig functions" "math()" eirA
\\`!p snip.rv = match.group(1)`h
endsnippet

snippet "(?<!\\)sum" "sum" "math()" eirA
\\sum${1:_{${2:n=${3:1}}}^{${4:\\infty}}}${VISUAL}
endsnippet

snippet "(?<!\\)prod" "product" "math()" eirA
\\prod${1:_{${2:n=${3:1}}}^{${4:\\infty}}}${VISUAL}
endsnippet

snippet "(?<!\\s)(?<!\\)(i{1,4})nt" "integral" "math()" eirA
\\`!p snip.rv = match.group(1)`nt${1:_{${2:0}}^{${3:1}}}${VISUAL}
endsnippet

snippet "(?<!\\)lim" "limit" "math()" eirA
\\lim_{${1:n}\\to ${2:\\infty}} ${VISUAL}
endsnippet

snippet lis "limsup" "math()" eiA
\\limsup_{${1:n}\\to ${2:\\infty}} ${VISUAL}
endsnippet
