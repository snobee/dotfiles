global !p
from latex import *

small_kinds = {'p': ['\\left(', '\\right)'],
	'b': ['\\left[', '\\right]'],
	'B': ['\\left{', '\\right}'],
	'v': ['\\left\\vert', '\\right\\vert'],
	'V': ['\\left\\Vert', '\\right\\Vert']}

def create_matrix(snip, offset=1):
	# get dimensions should be of the form "@@[sapbBvV]*@@\d+@@\d+@@"
	form = snip.buffer[snip.line].split('@@')
	m, n = int(form[-2]), int(form[-3])
	kind = form[-4]
	augmented = 'a' in kind
	small = 's' in kind and not augmented
	for i in 'as': kind = kind.replace(i,'')
	kind = kind[:1]
	if n*m > 500: n, m = 1, 1

	snippet_body = small_kinds[kind][0] if kind and small else ''
	effective_kind = 'small' if small else kind
	snippet_body += "\\begin{" + effective_kind + "matrix}"
	if augmented:
		snippet_body += "[" + "r"*n + "|r]"
		n += 1
	snippet_body += '\n\t' \
				+ ' \\\\\\\\\n\t'.join(
					' & '.join(
						'$' + str(i*n+j+offset) for j in range(n))
					for i in range(m)) \
				+ ' \\\\\\\\\n\\end{' + effective_kind + 'matrix}'
	if small and kind: snippet_body += small_kinds[kind][1]
	snip.expand_anon(snippet_body, trigger="@@[sabBpvV]*@@\d+@@\d+@@", options="irA")
endglobal

post_jump "create_matrix(snip)"
snippet 'M([sapbBvV]*)(\d+)\*(\d+) ' "nxm matrix" "math()" erA
@@`!p snip.rv = '@@'.join(match.group(i) for i in range(1,4))`@@
endsnippet

post_jump "create_matrix(snip)"
snippet 'V([spbBvV]*)(\d+) ' "n vector" "math()" erA
@@`!p snip.rv = match.group(1)`@@1@@`!p snip.rv = match.group(2)`@@
endsnippet

snippet 'I(\d)' "n identity matrix" "math()" erA
`!p
n = int(match.group(1))
snip.rv = "\\begin{bmatrix}\n\t" \
		+ "\\\\\n\t".join(["& ".join(
			["1 " if i==j else "0 "
				for i in range(n)])
			for j in range(n)])
		+ "\\\\\n\\end{bmatrix}"`
endsnippet
