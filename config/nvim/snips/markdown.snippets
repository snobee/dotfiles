# Markown Snippets
#   Options
#       i - in work expansion
#       w - word boundary
#       b - beginning of a line
#       A - auto expand
#       e - custom context
#       m - only in math mode
#       n - not in math mode
#       v - exclusive to visual mode
#
#   snippets
#       command     options description
#
#   math
#       ??          ?       ?
#        `-> sources all the snippets from 'math'
#
#   markdown
#       ??                  create a new header
#        `-> expands on 1-6 'h's
#       n           w       insert a linebreak
#       i           w       start  italics
#       b           w       start  boldface
#       s           w       start  strikethrough
#       u           w       start  underline
#       jj          iAn     start  inline math mode
#       kk          iAn     start  centred math mode
#       ali         wn*     enter  an align environment
#       new         bn      insert a pagebreak
#       enum                start  an ordered list
#       item                start  an unordered list
#       list                start  a checklist
#       ii          bAe     insert a list item (under a list)
#       code                start  a code block
#       link                insert a link
#       img                 insert an image
#       ??          iA      start  a table
#        `-> expands on "tab<format> " where format includes 'l', 'c', or 'r'
#       rr          bAe     insert a table row (under a table)
#       fig                 draw   a figure
#       figlong             draw   a long figure
#       figtall             draw   a tall figure

global !p
from latex import *

def create_table(snip):
	# get dimensions should be of the form "@@[lcr]+@@"
	form = snip.buffer[snip.line].split('@@')[-2]
	size = sum([form.count(e) for e in 'lcr'])
	formats = {'l': ':---', 'c': ':---:', 'r': '---:'}
	snippet_body = '| $' \
		+ ' | $'.join(str(x + 1) for x in range(size)) \
		+ ' |\n|' \
		+ ' | '.join(formats[x] for x in form) \
		+ ' |\n'
	snip.expand_anon(snippet_body, trigger="@@[lcr]+@@", options="irA")


def create_row(snip):
	size = snip.buffer[snip.line-1].replace('\\|', '').count('|') - 1
	snippet_body = '| $' \
		+ ' | $'.join(str(x + 1) for x in range(size)) \
		+ ' |\n' \
		if size > 0 else 'rr'
	snip.expand_anon(snippet_body, trigger="row", options="bA")


def create_item(snip):
	line = snip.buffer[snip.line-1].strip()
	snippet_body = ""
	if match := re.match(r"([-\+\*][\t ]+)\[[ x]\]", line):
		snippet_body += match.group(1) + "[$1] $0"
	if match := re.match(r"(>[\t ]+)([-\+\*])", line):
		snippet_body += match.group(1) + match.group(2) +" $0"
	elif len(line) > 0 and line[0] in '-*+':
		snippet_body += line[0] + " "
	elif match := re.match(r"(\d+)\.", line):
		snippet_body += str(int(match.group(1)) + 1) + ". "
	else:
		snippet_body += "ii"
	snip.expand_anon(snippet_body, trigger="item", options="bA")
endglobal

extends math

snippet "(h{1,6})" "headers" rb
`!p snip.rv = '#'*len(match.group(1))` ${VISUAL}$0
endsnippet

snippet n "newline" "not math()" ew
<br>
endsnippet

snippet i "italics" "not math() and snip.visual_mode" ewA
*${VISUAL}*
endsnippet

snippet i "italics" "not math() and not snip.visual_mode" ew
*$1*
endsnippet

snippet b "bold" "not math() and snip.visual_mode" ewA
**${VISUAL}**
endsnippet

snippet b "bold" "not math() and not snip.visual_mode" ew
**$1**
endsnippet

snippet s "strikethrough" "not math() and snip.visual_mode" ewA
~~${VISUAL}~~
endsnippet

snippet s "strikethrough" "not math() and not snip.visual_mode" ew
~~$1~~
endsnippet

snippet u "underline" "not math() and snip.visual_mode" ewA
<u>${VISUAL}</u>
endsnippet

snippet u "underline" "not math() and not snip.visual_mode" ew
<u>$1</u>
endsnippet

snippet jj "inline math" "not math()" ewA
\$${VISUAL}$1\$
endsnippet

snippet kk "math" "not math()" ewA
\$\$${VISUAL}$1\$\$
endsnippet

snippet new "pagebreak" "not math()" ew
<div style="page-break-after: always;"></div>

endsnippet

snippet enum "enumerate"
1. ${VISUAL}$0
endsnippet

snippet item "itemize"
- ${VISUAL}$0
endsnippet

snippet list "list"
- [$1] ${VISUAL}$0
endsnippet

post_jump "create_item(snip)"
snippet ii "item" bA
item
endsnippet

snippet code "code block"
\`\`\`$1
${VISUAL}$2
\`\`\`
endsnippet

snippet link "links"
[$1](${VISUAL}$2)
endsnippet

snippet img "images"
<center>
<img style="border-radius: 0.5em;"
src="images/$1">
</center>
endsnippet

post_jump "create_table(snip)"
snippet "tab([lcr]+) " "tables" irA
@@`!p snip.rv = match.group(1)`@@
endsnippet

post_jump "create_row(snip)"
snippet rr "table row" bA
row
endsnippet

# cannot use regex with python as all system calls are duplicated
snippet fig "draw a figure with swappy"
<center>
<img style="border-radius: 0.5em;"
src="`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 1024x1024 xc:white $name;
swappy -f $name -o $name;
echo $name`"
width=$1%>
</center>
endsnippet

snippet figlong "draw a long figure with swappy"
<center>
<img style="border-radius: 0.5em;"
src="`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 1024x512 xc:white $name;
swappy -f $name -o $name;
echo $name`"
width=$1%>
</center>
endsnippet

snippet figtall "draw a tall figure with swappy"
<center>
<img style="border-radius: 0.5em;"
src="`mkdir -p images;
name="images/$(zenity --entry --text='filename (no extension)').png";
convert -size 512x1024 xc:white $name;
swappy -f $name -o $name;
echo $name`"
width=$1%>
</center>
endsnippet
